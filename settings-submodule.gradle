// defines submodule
gradle.ext.submodules = [
        "apps-module"
]

/**
 * includeSubmodule
 * @param submodule
 * @return
 */
def includeSubmodule(submodule) {
    println("includeSubmodule:${submodule}")
    includeBuild("apps-module") {
        dependencySubstitution {
            substitute(module("org.oopscraft.apps:apps-module-core"))
                    .with(project(":apps-module-core"))
            substitute(module("org.oopscraft.apps:apps-module-web"))
                    .with(project(":apps-module-web"))
            substitute(module("org.oopscraft.apps:apps-module-batch"))
                    .with(project(":apps-module-batch"))
        }
    }
}

// load submodules
gradle.ext.submodules.each { submodule ->
    def directory = file(submodule)
    if(directory.exists() && directory.listFiles({it.getName() == "build.gradle"} as FileFilter).length) {
        includeSubmodule(submodule)
    }
}




//include "apps-module-web"
//project("apps-module-web").projectDir = file()








///**
// * include project
// * @param directory
// * @return
// */
//def includeProject(directory) {
//    if(directory.exists() && directory.listFiles({it.getName() == "build.gradle"} as FileFilter).length) {
//        def projectName = directory.getName()
//        println "includeProject[${directory}] as ${projectName}"
//        include "${projectName}"
//        project(":${projectName}").projectDir = directory
//        directory.listFiles({it.isDirectory()} as FileFilter).each {
//            includeProject(it)
//        }
//    }
//}
//
//// load submodules
//gradle.ext.submodules.each { submodule ->
//    includeProject(file(submodule))
//}

